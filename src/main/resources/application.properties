quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG

%dev.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v2
%dev.kafka.bootstrap.servers=localhost:9092

%prod.kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS}
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${ES_APICURIO_URL}
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.security.protocol=PLAINTEXT
# for mTLS
#%prod.mp.messaging.connector.smallrye-kafka.ssl.keystore.location=/deployments/certs/user/user.p12
#%prod.mp.messaging.connector.smallrye-kafka.ssl.keystore.type=PKCS12
#%prod.mp.messaging.connector.smallrye-kafka.ssl.keystore.password=${KAFKA_SSL_KEYSTORE_PASSWORD}

# REACTIVE messaging setup
mp.messaging.incoming.order-stream.connector=smallrye-kafka
mp.messaging.incoming.order-stream.topic=orders
mp.messaging.incoming.order-stream.group.id=order-consumer2
mp.messaging.incoming.order-stream.auto.offset.reset=earliest
mp.messaging.incoming.order-stream.enable.auto.commit=false
mp.messaging.incoming.order-stream.failure-strategy=dead-letter-queue
mp.messaging.incoming.order-stream.dead-letter-queue.topic=order.dlq
mp.messaging.incoming.order-stream.partitions=3
mp.messaging.incoming.order-stream.cloud-events=true
mp.messaging.incoming.order-stream.cloud-events-type=OrderEvent
# mp.messaging.incoming.order-stream.key.deserializer=org.apache.kafka.common.serialization.Deserializer
mp.messaging.incoming.order-stream.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.order-stream.apicurio.registry.schema-resolver=io.apicurio.registry.serde.DefaultSchemaResolver


mp.messaging.outgoing.metrics.connector=smallrye-kafka
mp.messaging.outgoing.metrics.topic=order.metrics
mp.messaging.outgoing.metrics.acks=-1
mp.messaging.outgoing.metrics.enable.idempotence=true
mp.messaging.outgoing.metrics.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.metrics.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
mp.messaging.outgoing.metrics.max-inflight-messages=1
mp.messaging.outgoing.metrics.delivery.time.out=60000
mp.messaging.outgoing.metrics.client.id=OrderManager
# Schema registry
# automatically register the schema with the registry, if not present
%dev.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v2
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${ES_APICURIO_URL}
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.security.protocol=PLAINTEXT
mp.messaging.outgoing.metrics.apicurio.registry.auto-register=true
mp.messaging.outgoing.metrics.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.metrics.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
mp.messaging.outgoing.metrics.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider
mp.messaging.outgoing.metrics.apicurio.registry.avro.encoding=JSON
mp.messaging.outgoing.metrics.cloud-events-type=OrderMetric
mp.messaging.outgoing.metrics.cloud-events-source=https://github.com/jbcodeforce/eda-demo-order-mp-consumer
mp.messaging.outgoing.metrics.cloud-events-subject=OrderAggregator
# Openshift descriptor generation at build time

#################################
# Source to Image to openshift 

quarkus.openshift.route.expose=true
quarkus.openshift.env.configmaps=eda-demo-order-cm
quarkus.container-image.group=ibmcase
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.openshift.labels.app=eda-demo-order-consumer
quarkus.container-image.name=eda-demo-order-consumer

quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=dev-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=dev-cluster-ca-cert
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=dev-cluster-ca-cert
